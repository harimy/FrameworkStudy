<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
           
    <!-- ※ 스프링이 제공하는 환경설정 XML 파일 샘플 -->
    <!--   스프링이 생성하고 관리해야 할 객체들에 대한 정보 전달 -->
    
    <!-- CalculatorImpl 클래스의 객체 생성을 위한 정보 전달 -->
    <bean id="cal" class="com.test.spr.CalculatorImpl"></bean>
	
	<!-- CalculatorAspect 클래스의 객체 생성을 위한 정보 전달 -->
	<bean id="aspect" class="com.test.spr.CalculatorAspect"></bean>
	<!-- 위의 두 객체 생성은 스프링(스프링 컨테이너)이 생성한다. 우리가 만드는 것이 아니다. -->
	
	<!-- CalculatorBeforeAdvice 클래스의 객체 생성을 위한 정보 전달 -->
	<bean id="before" class="com.test.spr.CalculatorBeforeAdvice"></bean>
	
	<!-- 이전에는 자바가 만들어놓은 설계도를 이용해서 우리가 직접 proxy 를 구성하고 설계하였음 -->
	<!-- 하지만 이번 실습에서는 그걸 스프링이 만들게 됨, 설계도도 스프링이 가지고 있음 -->
	
	<!-- check! -->
	<!-- 스프링이 제공하는 가짜 객체(Proxy) 클래스의 객체 생성을 위한 정보 전달 -->
	<!-- `ProxyFactoryBean` -->
	<bean id='proxy' class="org.springframework.aop.framework.ProxyFactoryBean">
		
		<!-- 여기서의 property 는 ProxyFactoryBean 이 가지는 속성들(변수) -->
		<!-- property 로 넘기는 것들은 모두 setter 를 이용하게 됨 → 이름이 정확해야 함 -->
		
		<!-- 주 업무 클래스의 인터페이스 정보 제공 -->
		<!-- → `proxyInterfaces` -->
		<property name="proxyInterfaces">
			<list>
				<!-- <value>정미패밀리</value> -->
				<value>com.test.spr.Calculator</value>
				<!-- <value>com.test.spr.Calculator2</value> -->
				<!-- <value>com.test.spr.Calculator3</value> -->
			</list>
		</property>
		 
		<!-- 주 업무 클래스의 객체 정보 제공 -->
		<!-- → `target` -->
		<property name="target" ref="cal"></property>
		 
		<!-- 보조 업무 클래스의 객체 정보 제공 -->
		<!-- → `interceptorNames` -->
		<property name="interceptorNames">
			<list>
				<!-- Around Advice -->
				<value>aspect</value>
				
				<!-- Before Advice -->
				<value>before</value>
			</list>
		</property>
		
		<!-- 즉, 1.주업무클래스의 설계도, 2.주업무클래스가 implements 하는 interfaces, 3.Aspect 클래스 
		이 셋을 인자로 넘겨주면 주업무를 따라하는 proxy 가 만들어진다.  
		이렇게하면 proxy.주업무메소드() 가 가능해지는데(add, sub, multi, div) 
		이 메소드들 시작과 끝에 aspect클래스의 invoke() 메소드에서 설정해뒀던 보조업무가 함께 수행된다.-->
		 
	</bean>
	
</beans>